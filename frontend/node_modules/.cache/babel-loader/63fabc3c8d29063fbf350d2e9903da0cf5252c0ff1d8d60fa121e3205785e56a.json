{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  getProfile: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  }\n};\n\n// Fields\nexport const fieldsAPI = {\n  getFields: async () => {\n    const response = await api.get('/fields');\n    return response.data;\n  },\n  createField: async fieldData => {\n    const response = await api.post('/fields', fieldData);\n    return response.data;\n  },\n  getField: async fieldId => {\n    const response = await api.get(`/fields/${fieldId}`);\n    return response.data;\n  },\n  updateField: async (fieldId, fieldData) => {\n    const response = await api.put(`/fields/${fieldId}`, fieldData);\n    return response.data;\n  },\n  deleteField: async fieldId => {\n    await api.delete(`/fields/${fieldId}`);\n  }\n};\n\n// Missions\nexport const missionsAPI = {\n  getMissions: async () => {\n    const response = await api.get('/missions');\n    return response.data;\n  },\n  createMission: async missionData => {\n    const response = await api.post('/missions', missionData);\n    return response.data;\n  },\n  getMission: async missionId => {\n    const response = await api.get(`/missions/${missionId}`);\n    return response.data;\n  },\n  updateMission: async (missionId, missionData) => {\n    const response = await api.put(`/missions/${missionId}`, missionData);\n    return response.data;\n  },\n  deleteMission: async missionId => {\n    await api.delete(`/missions/${missionId}`);\n  },\n  startMission: async missionId => {\n    const response = await api.post(`/missions/${missionId}/start`);\n    return response.data;\n  },\n  pauseMission: async missionId => {\n    const response = await api.post(`/missions/${missionId}/pause`);\n    return response.data;\n  },\n  resumeMission: async missionId => {\n    const response = await api.post(`/missions/${missionId}/resume`);\n    return response.data;\n  },\n  abortMission: async missionId => {\n    const response = await api.post(`/missions/${missionId}/abort`);\n    return response.data;\n  }\n};\n\n// Telemetry and Logs\nexport const telemetryAPI = {\n  getTelemetry: async (missionId, skip = 0, limit = 1000) => {\n    const response = await api.get(`/telemetry/${missionId}?skip=${skip}&limit=${limit}`);\n    return response.data;\n  },\n  getLogs: async (missionId, logLevel, skip = 0, limit = 100) => {\n    const params = new URLSearchParams();\n    if (missionId) params.append('mission_id', missionId.toString());\n    if (logLevel) params.append('log_level', logLevel);\n    params.append('skip', skip.toString());\n    params.append('limit', limit.toString());\n    const response = await api.get(`/logs?${params}`);\n    return response.data;\n  },\n  exportMissionData: async (missionId, format) => {\n    const response = await api.get(`/logs/${missionId}/export?format=${format}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};\n\n// AI Analytics\nexport const aiAPI = {\n  getAnomalies: async missionId => {\n    const response = await api.get(`/ai/anomalies/${missionId}`);\n    return response.data;\n  },\n  predictBattery: async missionId => {\n    const response = await api.post(`/ai/predict-battery?mission_id=${missionId}`);\n    return response.data;\n  }\n};\n\n// Health check\nexport const healthAPI = {\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authAPI","login","credentials","post","data","register","userData","getProfile","get","fieldsAPI","getFields","createField","fieldData","getField","fieldId","updateField","put","deleteField","delete","missionsAPI","getMissions","createMission","missionData","getMission","missionId","updateMission","deleteMission","startMission","pauseMission","resumeMission","abortMission","telemetryAPI","getTelemetry","skip","limit","getLogs","logLevel","params","URLSearchParams","append","toString","exportMissionData","format","responseType","aiAPI","getAnomalies","predictBattery","healthAPI","check"],"sources":["C:/agriculture-drone-gcs/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { \r\n  User, \r\n  Field, \r\n  Mission, \r\n  MissionSummary, \r\n  TelemetryData, \r\n  AIInsight, \r\n  MissionLogEntry,\r\n  LoginCredentials,\r\n  RegisterData,\r\n  Token,\r\n  FieldCreate,\r\n  MissionCreate\r\n} from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n});\r\n\r\n// Add token to requests\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('access_token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication\r\nexport const authAPI = {\r\n  login: async (credentials: LoginCredentials): Promise<Token> => {\r\n    const response: AxiosResponse<Token> = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  register: async (userData: RegisterData): Promise<User> => {\r\n    const response: AxiosResponse<User> = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  getProfile: async (): Promise<User> => {\r\n    const response: AxiosResponse<User> = await api.get('/auth/me');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Fields\r\nexport const fieldsAPI = {\r\n  getFields: async (): Promise<Field[]> => {\r\n    const response: AxiosResponse<Field[]> = await api.get('/fields');\r\n    return response.data;\r\n  },\r\n\r\n  createField: async (fieldData: FieldCreate): Promise<Field> => {\r\n    const response: AxiosResponse<Field> = await api.post('/fields', fieldData);\r\n    return response.data;\r\n  },\r\n\r\n  getField: async (fieldId: number): Promise<Field> => {\r\n    const response: AxiosResponse<Field> = await api.get(`/fields/${fieldId}`);\r\n    return response.data;\r\n  },\r\n\r\n  updateField: async (fieldId: number, fieldData: Partial<FieldCreate>): Promise<Field> => {\r\n    const response: AxiosResponse<Field> = await api.put(`/fields/${fieldId}`, fieldData);\r\n    return response.data;\r\n  },\r\n\r\n  deleteField: async (fieldId: number): Promise<void> => {\r\n    await api.delete(`/fields/${fieldId}`);\r\n  },\r\n};\r\n\r\n// Missions\r\nexport const missionsAPI = {\r\n  getMissions: async (): Promise<MissionSummary[]> => {\r\n    const response: AxiosResponse<MissionSummary[]> = await api.get('/missions');\r\n    return response.data;\r\n  },\r\n\r\n  createMission: async (missionData: MissionCreate): Promise<Mission> => {\r\n    const response: AxiosResponse<Mission> = await api.post('/missions', missionData);\r\n    return response.data;\r\n  },\r\n\r\n  getMission: async (missionId: number): Promise<Mission> => {\r\n    const response: AxiosResponse<Mission> = await api.get(`/missions/${missionId}`);\r\n    return response.data;\r\n  },\r\n\r\n  updateMission: async (missionId: number, missionData: Partial<MissionCreate>): Promise<Mission> => {\r\n    const response: AxiosResponse<Mission> = await api.put(`/missions/${missionId}`, missionData);\r\n    return response.data;\r\n  },\r\n\r\n  deleteMission: async (missionId: number): Promise<void> => {\r\n    await api.delete(`/missions/${missionId}`);\r\n  },\r\n\r\n  startMission: async (missionId: number): Promise<{ message: string }> => {\r\n    const response = await api.post(`/missions/${missionId}/start`);\r\n    return response.data;\r\n  },\r\n\r\n  pauseMission: async (missionId: number): Promise<{ message: string }> => {\r\n    const response = await api.post(`/missions/${missionId}/pause`);\r\n    return response.data;\r\n  },\r\n\r\n  resumeMission: async (missionId: number): Promise<{ message: string }> => {\r\n    const response = await api.post(`/missions/${missionId}/resume`);\r\n    return response.data;\r\n  },\r\n\r\n  abortMission: async (missionId: number): Promise<{ message: string }> => {\r\n    const response = await api.post(`/missions/${missionId}/abort`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Telemetry and Logs\r\nexport const telemetryAPI = {\r\n  getTelemetry: async (missionId: number, skip = 0, limit = 1000): Promise<TelemetryData[]> => {\r\n    const response: AxiosResponse<TelemetryData[]> = await api.get(\r\n      `/telemetry/${missionId}?skip=${skip}&limit=${limit}`\r\n    );\r\n    return response.data;\r\n  },\r\n\r\n  getLogs: async (\r\n    missionId?: number,\r\n    logLevel?: string,\r\n    skip = 0,\r\n    limit = 100\r\n  ): Promise<MissionLogEntry[]> => {\r\n    const params = new URLSearchParams();\r\n    if (missionId) params.append('mission_id', missionId.toString());\r\n    if (logLevel) params.append('log_level', logLevel);\r\n    params.append('skip', skip.toString());\r\n    params.append('limit', limit.toString());\r\n\r\n    const response: AxiosResponse<MissionLogEntry[]> = await api.get(`/logs?${params}`);\r\n    return response.data;\r\n  },\r\n\r\n  exportMissionData: async (missionId: number, format: 'csv' | 'json'): Promise<Blob> => {\r\n    const response = await api.get(`/logs/${missionId}/export?format=${format}`, {\r\n      responseType: 'blob',\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// AI Analytics\r\nexport const aiAPI = {\r\n  getAnomalies: async (missionId: number): Promise<AIInsight[]> => {\r\n    const response: AxiosResponse<AIInsight[]> = await api.get(`/ai/anomalies/${missionId}`);\r\n    return response.data;\r\n  },\r\n\r\n  predictBattery: async (missionId: number): Promise<any> => {\r\n    const response = await api.post(`/ai/predict-battery?mission_id=${missionId}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Health check\r\nexport const healthAPI = {\r\n  check: async (): Promise<{ status: string; timestamp: string }> => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}